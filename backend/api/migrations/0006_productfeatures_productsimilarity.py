# Generated by Django 5.0.2 on 2025-06-01 19:01

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0005_profile_activity_level_profile_health_goals'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProductFeatures',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_code', models.CharField(db_index=True, max_length=50, unique=True)),
                ('product_name', models.CharField(max_length=500)),
                ('main_category', models.CharField(db_index=True, max_length=200)),
                ('main_brand', models.CharField(blank=True, max_length=200, null=True)),
                ('main_country', models.CharField(blank=True, max_length=100, null=True)),
                ('nutrition_vector', models.JSONField(default=dict, help_text='100g başına besin değerleri')),
                ('allergen_vector', models.JSONField(default=dict, help_text='Alerjen varlık bilgileri (binary)')),
                ('additives_info', models.JSONField(default=dict, help_text='Katkı madde bilgileri ve sayıları')),
                ('nutriscore_data', models.JSONField(default=dict, help_text='Nutriscore grade ve numeric değerleri')),
                ('processing_level', models.IntegerField(choices=[(1, 'Minimal İşlenmiş'), (2, 'İşlenmiş Malzemeler'), (3, 'İşlenmiş Gıdalar'), (4, 'Ultra İşlenmiş Gıdalar')], default=1)),
                ('health_indicators', models.JSONField(default=dict, help_text='Sağlık göstergeleri (high_sugar, high_salt, vb.)')),
                ('nutrition_quality_score', models.FloatField(default=5.0, help_text='0-10 arası beslenme kalite skoru')),
                ('health_score', models.FloatField(default=0.0, help_text='Composite health score')),
                ('macro_ratios', models.JSONField(default=dict, help_text='Makro besin oranları')),
                ('ingredients_text', models.TextField(blank=True, help_text='İçerik listesi (temizlenmiş)')),
                ('ingredients_text_length', models.IntegerField(default=0)),
                ('ingredients_word_count', models.IntegerField(default=0)),
                ('data_completeness_score', models.FloatField(default=0.0, help_text='Veri tamlık skoru (0-1)')),
                ('is_valid_for_analysis', models.BooleanField(default=True, help_text='Analiz için geçerli mi?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'product_features',
                'indexes': [models.Index(fields=['main_category'], name='product_fea_main_ca_c5c3c9_idx'), models.Index(fields=['processing_level'], name='product_fea_process_75955d_idx'), models.Index(fields=['nutrition_quality_score'], name='product_fea_nutriti_ba6b94_idx'), models.Index(fields=['is_valid_for_analysis'], name='product_fea_is_vali_c17c41_idx')],
            },
        ),
        migrations.CreateModel(
            name='ProductSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nutritional_similarity', models.FloatField(help_text='Besin değerleri benzerliği (0-1)')),
                ('category_similarity', models.FloatField(help_text='Kategori benzerliği (0-1)')),
                ('overall_similarity', models.FloatField(help_text='Genel benzerlik skoru (0-1)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_product1', to='api.productfeatures')),
                ('product_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_product2', to='api.productfeatures')),
            ],
            options={
                'db_table': 'product_similarity',
                'indexes': [models.Index(fields=['overall_similarity'], name='product_sim_overall_5ac4b9_idx'), models.Index(fields=['nutritional_similarity'], name='product_sim_nutriti_6f56f2_idx')],
                'unique_together': {('product_1', 'product_2')},
            },
        ),
    ]
